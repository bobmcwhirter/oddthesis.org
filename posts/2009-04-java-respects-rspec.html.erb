---
title: "Java Respects RSpec"
author: Bob McWhirter
layout: post
---
<p>After living la vida Ruby for a while, I've grown to love <a title="RSpec" href="http://rspec.info/">RSpec</a>.&nbsp; It's truly quite flexible, and seems much quicker-to-the-point than JUnit for testing things.</p>
<p>Type-safety is nice and all, but when I'm writing tests, duck-typing is fantastic.</p>
<p>Someone previously had authored the <strong>rspec-maven-plugin</strong>.&nbsp; But it seemed to sit idle, so I've usurped ownership lately.&nbsp; The plugin, if you don't know, allows you to run RSpec, via JRuby, against your Java code, during the typical <strong>mvn test</strong> lifecycle phase.</p>
<p>Since I'm doing testing against some hard-core app-server innards, I started tripping over some shortcomings of the plugin.&nbsp; In the process, I've managed to slip another language into the mix.</p>
<p>First, my code deals with JBoss-VFS, which itself mucks about with URL protocol handles to enable nice things like <strong>vfsmemory://</strong> URLs and such.&nbsp; But installing these handlers has some fairly strict classloading requirements, namely that they need to be in the system classloader.&nbsp;</p>
<p>So now rspec-maven-plugin forks and sets up your dependencies in the root classloader.</p>
<p>The output during a test-run was sub-par, requiring you to open the HTML test report to really find out how things did.</p>
<p>Now I've added in a console-based progress formatter akin to the JUnit output</p>
<pre>[INFO] Running RSpec tests from /Users/bob/oddthesis/jboss-rails/src/test/specs<br />SPEC: deployers/app_rails_yaml_parsing_deployer_spec.rb<br />  - Java::OrgJbossRailsCoreDeployers::AppRailsYamlParsingDeployer<br />  1 passing; 0 failing; 0 pending<br />SPEC: deployers/crypto_yaml_parsing_deployer_spec.rb<br />  - Java::OrgJbossRubyEnterpriseCryptoDeployers::CryptoYamlParsingDeployer<br />  1 passing; 0 failing; 0 pending<br />SPEC: deployers/rails_env_yaml_parsing_deployer_spec.rb<br />  - Java::OrgJbossRailsCoreDeployers::RailsEnvYamlParsingDeployer<br />  1 passing; 0 failing; 0 pending<br />SPEC: deployers/rails_structure_spec.rb<br />  - Java::OrgJbossRailsCoreDeployers::RailsStructure<br />  0 passing; 0 failing; 1 pending<br />SPEC: utils/string_utils_spec.rb<br />  - Java::OrgJbossRubyCoreUtil::StringUtils camelize<br />  3 passing; 0 failing; 0 pending<br />  - Java::OrgJbossRubyCoreUtil::StringUtils converting paths to class names<br />  3 passing; 0 failing; 0 pending<br />  - Java::OrgJbossRubyCoreUtil::StringUtils converting paths to class names accomodating namespaces<br />  2 passing; 0 failing; 0 pending<br />=========================================<br />TOTAL: 11 passing; 0 failing; 1 pending<br /></pre>
<p>You still get the HTML report, of course.</p>
<p>Also, since you like RSpec, you probably dislike Maven grinding away, searching the internet for non-existent POMs, and generally being a time-waster.&nbsp; (If you say "Nexus" I'll punch you in the neck.)</p>
<p>So, after you've run <strong>mvn test</strong> once, you'll have <strong>run-rspecs.sh</strong> sitting in your <strong>target/</strong> directory.&nbsp; (There's the 3rd language, plain ol' shell).&nbsp; This simply re-creates the <strong>fork()</strong> and <strong>CLASSPATH</strong> manipulation before invoking jruby to execute the actual script.</p>
<p>If you want to re-run your tests, quickly, just execute that script:</p>
<pre>$ ./target/run-rspecs.sh<br /></pre>
<p>If you're futzing around with just a subset of tests, you can pass any normal <strong>spec</strong> command-line option to it.</p>
<p>This invocation will run only the specs under my <strong>test/specs/deployers/</strong> directory:</p>
<pre>$ ./target/run-rspecs.sh -p deployers/**_spec.rb<br /></pre>
<p>Later, I'll describe how I'm actually writing my RSpec tests to give my <a title="JBoss Microcontainer" href="http://www.jboss.org/jbossmc/">JBoss Microcontainer</a> deployers a good thrashing.</p>
<p>To use this, you'll want the latest SNAPSHOT from the <a title="rspec-maven-plugin 1.0-beta-6-SNAPSHOT" href="http://snapshots.repository.codehaus.org/org/codehaus/mojo/rspec-maven-plugin/1.0-beta-6-SNAPSHOT/">Codehaus snapshot repository</a>.</p>
<p>&nbsp;</p>
