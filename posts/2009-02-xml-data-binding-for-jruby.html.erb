---
title: "XML Data-Binding for JRuby"
author: Bob McWhirter
date: 2009-2-15
layout: post
---
<p>In the process of binding a fancy SOAP stack to JBoss-Rails, I of course became frustrated working with DOM trees or StAX iterators.&nbsp; If you're using 100% Pure Java(tm), you'd use JAXB, and compile up a nice tree matching the object-model described by the XSD in the WSDL.</p>
<p>I, on the other hand, am not using 100% Pure Java(tm) syntax and processes. I'm dynamically deploying WSDLs handled by dynamically reloadable Ruby classes.</p>
<p>So I need a dynamic data-binding to wire up to the <a href='http://cxf.apache.org/' title='Apache-CXF'>Apache-CXF</a> chain.&nbsp; A CXF <a href='http://cxf.apache.org/javadoc/latest/org/apache/cxf/databinding/DataBinding.html' title='DataBinding javadocs'>DataBinding</a> is responsible for handling readers and writers capable of converting an XML stream into <strong>some other object</strong>.&nbsp; And back again.&nbsp; The data-binding is informed by the XML Schema used to define the web-service.</p>
<p>Now, some examples using the Amazon EC2 WSDL.&nbsp;</p>
<p>The describe-instances operation is used to list information about running server instances on EC2.&nbsp; The request message is defined by this XSD fragment:</p>
<pre>&lt;xs:element name="DescribeInstances" <br/>            type="tns:DescribeInstancesType"/&gt;<br/><br/>&lt;xs:complexType name="DescribeInstancesType"&gt;<br/>  &lt;xs:sequence&gt;     <br/>    &lt;xs:element name="instancesSet" <br/>                type="tns:DescribeInstancesInfoType"/&gt;<br/>  &lt;/xs:sequence&gt;    <br/>&lt;/xs:complexType&gt; <br/>                <br/>&lt;xs:complexType name="DescribeInstancesInfoType"&gt;<br/>  &lt;xs:sequence&gt;     <br/>    &lt;xs:element name="item" <br/>                type="tns:DescribeInstancesItemType" <br/>                minOccurs="0" <br/>                maxOccurs="unbounded"/&gt;<br/>  &lt;/xs:sequence&gt;    <br/>&lt;/xs:complexType&gt; <br/>                <br/>&lt;xs:complexType name="DescribeInstancesItemType"&gt;<br/>  &lt;xs:sequence&gt;     <br/>    &lt;xs:element name="instanceId" <br/>                type="xs:string" /&gt;<br/>  &lt;/xs:sequence&gt;    <br/>&lt;/xs:complexType&gt; </pre>
<p>When deployed (at runtime) the Ruby data-binding swizzles that into some relatively simple Ruby classes:</p>
<pre>class DescribeInstancesType<br/>  attr_accessor :instancesSet<br/><br/>  def initialize()<br/>    @instancesSet = DescribeInstancesInfoType.new()<br/>  end<br/>end<br/><br/>class DescribeInstancesInfoType &lt; ::Array<br/>end<br/><br/>class DescribeInstancesItemType<br/>  attr_accessor :instanceId<br/><br/>  def initialize()<br/>    @instanceId = ''<br/>  end<br/>end<br/></pre>
<p>Through some magic involving subclassing <strong>::Array</strong>, when a portion of the tree is array-like, we end up with a very intuitive-to-use model.&nbsp; We've borrowed this strategy from <strong>xsd2ruby</strong> by the <a href='http://dev.ctor.org/soap4r' title='soap4r'>soap4r</a> guys.</p>
<p>Throwing some XML at it:</p>
<pre>&lt;ns1:DescribeInstances&gt;<br/>  &lt;ns1:instancesSet&gt;<br/>    &lt;ns1:item&gt;<br/>      &lt;ns1:instanceId&gt;foo&lt;/ns1:instanceId&gt;<br/>    &lt;/ns1:item&gt;<br/>    &lt;ns1:item&gt;<br/>      &lt;ns1:instanceId&gt;bar&lt;/ns1:instanceId&gt;<br/>    &lt;/ns1:item&gt;<br/>    &lt;ns1:item&gt;<br/>      &lt;ns1:instanceId&gt;baz&lt;/ns1:instanceId&gt;<br/>    &lt;/ns1:item&gt;<br/>  &lt;/ns1:instancesSet&gt;<br/>&lt;/ns1:DescribeInstances&gt;<br/></pre>
<p>Results in the Ruby object:</p>
<pre>#&lt;DescribeInstancesType:0x57581ef <br/>    @instancesSet=[#&lt;DescribeInstancesItemType:0x23356034 <br/>                       @instanceId="foo"&gt;, <br/>                   #&lt;DescribeInstancesItemType:0x242e34f2 <br/>                       @instanceId="bar"&gt;, <br/>                   #&lt;DescribeInstancesItemType:0x6dc22478 <br/>                       @instanceId="baz"&gt;]&gt;<br/></pre>
<p>And using it is quite simple:</p>
<pre>root.instancesSet.each{|e| puts e.instanceId }<br/></pre>
<p>Likewise, in a day or two, we'll have the reverse, capable of marshalling a Ruby object right back to some XSD-defined XML.</p>
<p>And all of this will be used in the JBoss-Rails web-services bits.&nbsp; It's all driven by the Java StAX parsers, so no need to argue about "REXML is slow!" or whatnot.&nbsp; All XML-handling occurs from Java, against fast Java XML parsers.</p>
